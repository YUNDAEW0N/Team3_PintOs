Kernel command line: -q -f put syn-read put child-syn-read run syn-read
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  130,867,200 loops/s.
hd0:0: detected 321 sector (160 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 225 sector (112 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'syn-read' into the file system...
Putting 'child-syn-read' into the file system...
Executing 'syn-read':
(syn-read) begin
(syn-read) create "data"
(syn-read) open "data"
(syn-read) write "data"
(syn-read) close "data"
process fork child thread name : child-syn-read
is_kernel vaddr error!
_do_fork pml4 for each error!
_do_fork error! 
(syn-read) exec child 1 of 10: "child-syn-read 0"
process fork child thread name : child-syn-read
is_kernel vaddr error!
_do_fork pml4 for each error!
_do_fork error! 
(syn-read) exec child 2 of 10: "child-syn-read 1"
process fork child thread name : child-syn-read
is_kernel vaddr error!
_do_fork pml4 for each error!
_do_fork error! 
(syn-read) exec child 3 of 10: "child-syn-read 2"
process fork child thread name : child-syn-read
is_kernel vaddr error!
_do_fork pml4 for each error!
_do_fork error! 
(syn-read) exec child 4 of 10: "child-syn-read 3"
process fork child thread name : child-syn-read
is_kernel vaddr error!
_do_fork pml4 for each error!
_do_fork error! 
(syn-read) exec child 5 of 10: "child-syn-read 4"
process fork child thread name : child-syn-read
is_kernel vaddr error!
_do_fork pml4 for each error!
_do_fork error! 
(syn-read) exec child 6 of 10: "child-syn-read 5"
process fork child thread name : child-syn-read
is_kernel vaddr error!
_do_fork pml4 for each error!
_do_fork error! 
(syn-read) exec child 7 of 10: "child-syn-read 6"
process fork child thread name : child-syn-read
is_kernel vaddr error!
_do_fork pml4 for each error!
_do_fork error! 
(syn-read) exec child 8 of 10: "child-syn-read 7"
process fork child thread name : child-syn-read
is_kernel vaddr error!
_do_fork pml4 for each error!
_do_fork error! 
(syn-read) exec child 9 of 10: "child-syn-read 8"
process fork child thread name : child-syn-read
is_kernel vaddr error!
_do_fork pml4 for each error!
_do_fork error! 
(syn-read) exec child 10 of 10: "child-syn-read 9"
Interrupt 0x0d (#GP General Protection Exception) at rip=8004208817
 cr2=0000000000000000 error=               0
rax ccccccccccccc9e4 rbx 0000000000000000 rcx 0000000000403818 rdx 0000000000000020
rsp 0000008004240e60 rbp 0000008004240e90 rsi 0000000000000000 rdi 00000080042402c8
rip 0000008004208817 r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000216 r12 000000800421d8fb r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000286
es: 001b ds: 001b cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:97 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x800421888e 0x800421d5ca 0x8004209745 0x8004209b63 0x800421c8a0 0x800421dd71 0x800421d9cf 0x800421d824 0x4007b9 0x4002be 0x400fa7 0x400ff0.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 94 ticks
Thread: 30 idle ticks, 34 kernel ticks, 30 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 137 reads, 504 writes
hd1:0: 225 reads, 0 writes
Console: 3542 characters output
Key